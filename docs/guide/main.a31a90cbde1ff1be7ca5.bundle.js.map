{"version":3,"file":"main.a31a90cbde1ff1be7ca5.bundle.js","sources":["webpack:///./src/library/model.js"],"sourcesContent":["import { schemaWalk } from \"@cloudflare/json-schema-walker\"\nimport { concat } from \"lodash\"\n\nexport const buildDefinition = (type, payload) => {\n  return { type, ...payload }\n}\n\nexport const object = payload => buildDefinition(\"object\", payload)\nexport const array = payload => buildDefinition(\"array\", payload)\nexport const boolean = payload => buildDefinition(\"boolean\", payload)\nexport const string = payload => buildDefinition(\"string\", payload)\nexport const number = payload => buildDefinition(\"number\", payload)\nexport const integer = payload => buildDefinition(\"integer\", payload)\n\nexport const fieldset = (datatype, payload = {}) =>\n  buildDefinition(\"fieldset\", { datatype, ...payload })\nexport const field = (datatype, payload = {}) =>\n  buildDefinition(\"field\", { datatype, ...payload })\n\nexport const taskSchema = object({\n  title: \"A list of tasks\",\n  required: [\"title\"],\n  properties: {\n    title: string({\n      title: \"Task list title\",\n    }),\n    tasks: array({\n      title: \"Tasks\",\n      items: object({\n        required: [\"title\"],\n        properties: {\n          title: string({\n            title: \"Title\",\n            description: \"A sample title\",\n          }),\n          details: string({\n            title: \"Task details\",\n            description: \"Enter the task details\",\n          }),\n          done: boolean({\n            title: \"Done?\",\n            default: false,\n          }),\n        },\n      }),\n    }),\n  },\n})\n\nexport const taskModel = fieldset(\"object\", {\n  pointer: \"#/\",\n  title: \"A list of tasks\",\n  children: [\n    field(\"string\", {\n      pointer: \"#/properties/title\",\n      name: \"title\",\n      title: \"Task list title\",\n    }),\n    fieldset(\"array\", {\n      pointer: \"#/properties/tasks\",\n      name: \"tasks\",\n      title: \"Tasks\",\n      children: [\n        fieldset(\"object\", {\n          pointer: \"#/properties/tasks/items\",\n          name: \"items\",\n          children: [\n            field(\"string\", {\n              pointer: \"#/properties/tasks/items/properties/title\",\n              name: \"title\",\n              title: \"Title\",\n              description: \"A sample title\",\n            }),\n            field(\"string\", {\n              pointer: \"#/properties/tasks/items/properties/details\",\n              name: \"details\",\n              title: \"Task details\",\n              description: \"Enter the task details\",\n            }),\n            field(\"boolean\", {\n              pointer: \"#/properties/tasks/items/properties/done\",\n              name: \"done\",\n              title: \"Done?\",\n              default: false,\n            }),\n          ],\n        }),\n      ],\n    }),\n  ],\n})\n\nexport const orderSchema = object({\n  $schema: \"http://json-schema.org/schema#\",\n  properties: {\n    orderNumber: string(),\n    orderDate: string(),\n    customer: object({\n      properties: {\n        customerNumber: string(),\n        firstName: string(),\n        lastName: string(),\n      },\n    }),\n    orderItems: array({\n      items: object({\n        properties: {\n          productNumber: string(),\n          quantity: integer(),\n          unitPrice: integer(),\n        },\n      }),\n    }),\n    shippingAddress: object({\n      properties: {\n        street: string(),\n        city: string(),\n        country: string(),\n        zip: string(),\n      },\n    }),\n    totalPrice: number(),\n  },\n})\n\nexport const fetchSchemaPaths = schema => {\n  const schemaPaths = []\n  schemaWalk(schema, (schemaObject, path, parentSchemaObject, parentPath) => {\n    schemaPaths.push({\n      type: schemaObject.type,\n      path,\n      parentPath,\n      fullPath: concat(parentPath, path),\n    })\n  })\n  return schemaPaths\n}\n"],"mappings":"AAAA","sourceRoot":""}